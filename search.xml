<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小程序第一天]]></title>
    <url>%2F2022%2F08%2F07%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[学习视频：https://www.bilibili.com/video/BV1tt4y1W77c?p=7&amp;vd_source=cc4edd822d395a23d5fa95cfcf4c2b66官方文档：https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window 基础组件text，编写文本信息，类似于span标签；view，容器，类似于div标签；image，图片。 像素rpx，宽750rpx。 flex布局设置display为flex，并进行布局展示设置： 123456789101112.menu&#123; display: flex; # 规定主轴的方向(row/column) flex.direction: column; # 元素在主轴方向上如何展示(flex-start/space-around/space-between/center) justify-content: space-around; # 元素在副轴方向上如何展示(flex-start/space-around/space-between/center) align-items: flex-end;&#125; 文件utils-自带的公共功能；pages-页面文件； json-配置文件； js-js； wxml-html； wxss-css；project.config.json-项目相关配置；sitemap.json-爬虫。 默认需要的文件app.json-需要一个pages数组；pages-需要有一个页面；app.js-需要有此文件，才能生成二维码，在手机上预览。 顶部导航栏在全局的page.json的josn中加上window的navigationBar系列参数： 1234&quot;window&quot;: &#123; &quot;navigationBarTitleText&quot;: &quot;首页&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#1E90FF&quot;&#125; 底部导航栏在全局的page.json的josn中加上tabBar系列参数： 123456789101112131415161718&quot;tabBar&quot;: &#123; &quot;color&quot;: &quot;#707070&quot;, &quot;selectedColor&quot;: &quot;#1E90FF&quot;, &quot;list&quot;: [ &#123; &quot;pagePath&quot;: &quot;pages/index/index&quot;, &quot;text&quot;: &quot;首页&quot;, &quot;iconPath&quot;: &quot;images/tabbar/index.png&quot;, &quot;selectedIconPath&quot;: &quot;images/tabbar/index_press.png&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/paimai/paimai&quot;, &quot;text&quot;: &quot;拍卖&quot;, &quot;iconPath&quot;: &quot;images/tabbar/paimai.png&quot;, &quot;selectedIconPath&quot;: &quot;images/tabbar/paimai_press.png&quot; &#125; ] &#125; 实例]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[访问github]]></title>
    <url>%2F2022%2F08%2F06%2F%E8%AE%BF%E9%97%AEgithub%2F</url>
    <content type="text"><![CDATA[参考文档：国内打不开GitHub网站100%解决办法 最近国内访问github.com经常打不开，无法访问，解决Github打不开问题，我使用的是参考文档中的终极方法： windows打开hosts文件（C:\Windows\System32\drivers\etc）,末尾放入以下两个 IP 地址： 1234# GitHub Start140.82.114.4 github.com199.232.69.194 github.global.ssl.fastly.net# GitHub End 再在 CMD 命令行中执行下面语句 来刷新 DNS，重启浏览器之后就能进入Github 网址。 1ipconfig/flushdns mac打开finder，点击顶部菜单栏的【前往】，再点击【前往文件夹】，输入/etc/hosts前往，找到hosts文件，将它拖拽到桌面上， 右键桌面上的hosts文件，滑动到【打开方式】，再点击【文本编辑】，末尾放入以下两个 IP 地址： 1234# GitHub Start140.82.114.4 github.com199.232.69.194 github.global.ssl.fastly.net# GitHub End 修改完按command + s保存，将桌面的hosts文件拖拽回/etc/hosts中，点击【认证】，再点击【替换】，再输入开机密码即可。 再在 CMD 命令行中执行下面语句，并输入密码来刷新 DNS，重启浏览器之后就能进入Github 网址。 1sudo killall -HUP mDNSResponder &amp;&amp; echo macOS DNS Cache Reset]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm 2020.1 for mac破解]]></title>
    <url>%2F2022%2F08%2F06%2Fpycharm-2020-1-for-mac%2F</url>
    <content type="text"><![CDATA[参考文档：第一种方法 链接: https://pan.baidu.com/s/16ZZ9Z0xdWhniqjBmnCXBIw 提取码: 41e4 第二种方法 链接：https://pan.baidu.com/s/1P0quNIkdTTU4eX4zMoW4Hg 提取码：ol9s 第一种方法第一步：如果打开了pycharm，先关闭。 第二步：在finder里搜索pycharm，右键显示包内容，如图所示： 第三步：找到Contens下面的 bin 目录，将下载的补丁文件放到该目录下，如图所示： 第四步：修改配置，将 pycharm.vmoptions 文件以”文本编辑”打开，在末尾处配置补丁文件路径：-javaagent: (这里填写你当前补丁文件的路径)。添加后command + s 保存，就激活成功啦! 1-javaagent:/Applications/PyCharm.app/Contents/bin/JetbrainsCrack-3.1-release-enc.jar]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习]]></title>
    <url>%2F2021%2F05%2F13%2Fgit%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[参考文档： 1、廖雪峰Git教程 Git是目前世界上最先进的分布式版本控制系统（没有之一）。 git init能把当前目录变成git可以管理的仓库，会多一个隐藏的.git目录，来跟踪管理版本库，ls -ah就能看到。 1git init git status可以让我们时刻掌握仓库当前的状态。 12345678910111213141516171819$ git statusOn branch hexoYour branch is up to date with &apos;origin/hexo&apos;.Changes not staged for commit: (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: &quot;source/_posts/turtle\347\273\230\345\210\266\345\215\241\346\257\224.md&quot; modified: &quot;source/_posts/\346\233\264\346\215\242\347\224\265\350\204\221\346\233\264\346\226\260\345\215\232\345\256\242\346\223\215\344\275\234.md&quot; deleted: source/images/kirby.pngUntracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) &quot;source/_posts/git\345\255\246\344\271\240.md&quot; source/images/kirby.jpgno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) git diff可以查看修改。 1234567891011121314151617warning: LF will be replaced by CRLF in source/_posts/turtle绘制卡比.md.The file will have its original line endings in your working directorydiff --git &quot;a/source/_posts/turtle\347\273\230\345\210\266\345\215\241\346\257\224.md&quot; &quot;b/source/_posts/turtle\347\273\230\345\210\266\345\215\241\346\257\224.md&quot;index c87a273..d23db65 100644--- &quot;a/source/_posts/turtle\347\273\230\345\210\266\345\215\241\346\257\224.md&quot;+++ &quot;b/source/_posts/turtle\347\273\230\345\210\266\345\215\241\346\257\224.md&quot;@@ -58,5 +58,5 @@ pip3 install turtle 28、turtle.home()：移动到起始点，坐标原点（0，0）,并设置朝向为起始朝向。 #### 实践-用turtle绘制了卡比（不知道细长椭圆如何绘制，目前只能是大眼卡比了-![kirby](/images/kirby.png)+绘制了星之卡比（不知道细长椭圆如何绘制，目前只能是大眼卡比了+![kirby](/images/kirby.jpg)diff --git &quot;a/source/_posts/\346\233\264\346\215\242\347\224\265\350\204\221\346\233\264\346\226\260\345\215\232\345\256\242\346\223\215\344\275\234.md&quot; &quot;b/source/_posts/\346\233\264\346\215\242\347\224\265\350\204\221\346\233\264\346\226\260\345\215\232\345\256\242\346\223\215\344\275\234.md&quot;index aa094e6..efc3a20 100644--- &quot;a/source/_posts/\346\233\264\346\215\242\347\224\265\350\204\221\346\233\264\346\226\260\345\215\232\345\256\242\346\223\215\344\275\234.md&quot; git log显示从近到远的提交日志，加上–pretty=oneline参数可以不眼花缭乱些。 123456789101112131415161718$ git log --pretty=oneline9ccc804e223dfc72d3890e5eb9587b63fb0525e7 (HEAD -&gt; hexo, origin/hexo, origin/HEAD) 更新kirby0ef0d8581a547c7bf5c2314c3de1e939385a6451 更新文章56509173799412c0f9575de686cebf85f61a1b46 turtle学习4feb779ecd44370f3af674d838e96a6addbce46d 添加mac更新博客操作a89990f1dbc74e279472d014b3987c0defc46b8c 添加mac更新博客操作cbfd91c059a67a5e7e049e22b8dcc47c52258952 添加mac更新博客操作ba515fe551dda7065e6cc2dd436d5cf804b25060 0508更新61691b5c0e91aa72ca8a8fec996b839965db12f9 添加更换电脑更新博客操作72abe14b6a972b78698e7b092a0b753eb7a258b1 添加文章SQL知识复习d601245a8cf7c362a7ec5575792275bfffd978ab update4205797d51a5e297b3f12e5c6745f668b66eaf09 update49e2c265323b776a201b60fd0d70f1f862a2e107 new blog905a1084deca61c8ee17084c4ebed8976794ec1d hexo75ac242a01bedf1ac4f7ea4868d7831df90b0340 Site updated: 2019-07-01 11:34:450eacae13be7e584913f3deff4556d79d84e48e3b Site updated: 2019-07-01 09:43:1610fd9752409b14ca8e645c91f61b8faf371a7f0c Site updated: 2019-06-28 16:02:396696512d45f0fd2e1f0aab4462e386a51d63d5f5 First commit git reset –hard xxx可以退回到指定版本。在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。维护commit id也能退回到指定版本。 1$ git reset --hard HEAD^ 1$ git reset --hard 0ef0d8 git reflog可以查看历史命令。 12345678$ git reflog9ccc804 (HEAD -&gt; hexo, origin/hexo, origin/HEAD) HEAD@&#123;0&#125;: pull: Fast-forward0ef0d85 HEAD@&#123;1&#125;: commit: 更新文章5650917 HEAD@&#123;2&#125;: commit: turtle学习4feb779 HEAD@&#123;3&#125;: pull: Fast-forwardba515fe HEAD@&#123;4&#125;: commit: 0508更新61691b5 HEAD@&#123;5&#125;: commit: 添加更换电脑更新博客操作72abe14 HEAD@&#123;6&#125;: clone: from git@github.com:hannnnnah/hannnnnah.github.io.git git checkout – &lt;file修改后还没有放到暂存区，可以丢弃工作区的修改，回到和版本库一模一样的状态。 1$ git checkout -- readme.txt git reset HEAD &lt;file可以把暂存区的修改撤销掉，重新放回工作区。 1$ git reset HEAD readme.txt git remote add origin git@github.com:GitHub账户名/仓库名.git把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。 git push -u origin master由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 git remote rm origin删除远程库，此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。 git clone git@github.com:GitHub账户名/仓库名.git克隆一个本地库。 git branch查看当前所有分支，当前分支前会标一个*号。 123$ git branch* dev master git branch &lt;name创建分支。 git checkout -b &lt;name创建并切换到新的分支,相当于： 123$ git branch dev$ git checkout devSwitched to branch &apos;dev&apos; git switch &lt;name创建分支。 git switch -c &lt;name用switch创建并切换到新的分支更科学。 git merge &lt;name把某分支的工作成果合并到当前分支上： git branch -d &lt;name合并后就可以删除之前的分支了。 git branch -D &lt;name分支还没有被合并，如果要强行删除，需要使用大写的-D参数。 git log –graph可以看到分支合并图。 git stash当前工作只进行到一半，还无法提交，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。 git stash list查看工作现场列表。 12$ git stash liststash@&#123;0&#125;: WIP on dev: f52c633 add merge git stash apply和git stash pop用git stash apply恢复后，stash内容并不删除，需要用git stash drop来删除，可以指定stash；用git stash pop，恢复的同时把stash内容也删了。 1$ git stash apply stash@&#123;0&#125; git cherry-pick &lt;cmmmit_id把某个分支提交的修改“复制”到当前分支，，避免重复劳动。 git tag &lt;name用于新建一个标签，默认为HEAD，也可以指定一个commit id。 git tag -a &lt;name -m “xxx…”可以指定标签信息。 git tag可以查看所有标签。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[turtle学习]]></title>
    <url>%2F2021%2F05%2F10%2Fturtle%E7%BB%98%E5%88%B6%E5%8D%A1%E6%AF%94%2F</url>
    <content type="text"><![CDATA[参考文档：1、python3的turtle笔记 安装turtlePython2安装 1pip install turtulem Python3安装 1pip3 install turtle 基础概念画布（canvas）常用的方法有2个：screensize()和setup()。1、turtle.screensize(canvwidth,canvheight,bg)，参数分别为画布的宽、高、背景颜色。2、turtle.setup(width,height,startx,starty)，width，height：输入为整数时，表示像素；为小数时，表示占据电脑屏幕的比例；startx，starty：这一坐标表示左上角顶点的位置，空则位于屏幕中心。 画笔1、turtle.pensize()：画笔的宽度。2、turtle.pencolor()：画笔的颜色。3、turtle.fillcolor()：图形的填充颜色。4、turtle.fill(a,b)：同时设置画笔和填充颜色。5、turtle.filling()：返回当前是否在填充状态。6、turtle.begin_fill()：准备开始填充图形。7、turtle.end_fill()：填充完成。8、turtle.speed()：画笔的移动速度，范围是[0,10]的整数，越大越快。9、turtle.forward()：向当前画笔方向移动x像素。10、turtle.backword()：向当前画笔的反方向移动x像素。11、turtle.right()：顺时针转动x度。12、turtle.left()：逆时针转动x度。13、turtle.seth()：绝对角度，以原点为参考系，90为上，180为左，270为下，0为右。14、turtle.pendown()：移动时绘制图形。15、turtle.penup()：移动时不绘制图形。16、turtle.circle(a,b,c)：半径为正，则圆心在左；反之在右，circle(100,None,5)会画出一个五边形。17、turtle.hideturtle()：隐藏箭头。18、turtle.showturtle()：显示箭头。19、turtle.isvisible()：返回当前turtle是否可见。20、turtle.clear()：清空窗口，但是位置和状态不变。21、turtle.reset()：清空窗口，重置为初始状态。22、turtle.undo()：撤销上一个动作。23、turtle.stamp()：复制当前图形。24、turtle.write(s[,font=(“font-name”,font_size,”font_type”)])：文本。25、turtle.goto(x,y)：移动到一个绝对坐标。26、turtle.setx()：设置x轴坐标。27、turtle.sety()：设置y轴坐标。28、turtle.home()：移动到起始点，坐标原点（0，0）,并设置朝向为起始朝向。 实践绘制了星之卡比（不知道细长椭圆如何绘制，目前只能是大眼卡比了]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>turtle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更换电脑更新博客操作]]></title>
    <url>%2F2021%2F05%2F08%2F%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[参考文档：廖老师的git教程 更换Windows电脑工作安装git： 1sudo apt-get install git 生成SSH添加到GitHub： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 检查： 123git config user.namegit config user.emailssh-keygen -t rsa -C &quot;youremail&quot; 一路回车后，找到文件夹下的id_rsa.pub文件，复制到GitHub的setting中，找到SSH keys的设置选项，点击New SSH key添加， 找不到的可以”Command+Shift+. “控制文件显隐或者直接搜索：Finder–&gt;前往–&gt;前往文件夹–&gt;输入~/.ssh检查： 1ssh -T git@github.com 安装node： 1sudo apt-get install nodejs 安装npm： 1sudo apt-get install npm 检查： 12node -vnpm -v 安装hexo： 1npm install -g hexo-cli 新建文件夹后，拉取文件： 1git clone git@github.com:hannnnnah/hannnnnah.github.io.git 然后进入文件夹，就可以使用啦： 12npm installnpm install hexo-deployer-git --save 生成、部署后就可以更新啦： 12hexo ghexo d 创建文章： 1hexo new post newpage 创建草稿： 1hexo new draft newpage 预览草稿： 1hexo server --draft 发布草稿： 1hexo publish draft newpage 编辑完后上传： 123git add .git commit –m &quot;xxxx&quot;git push 再次拉取： 1git pull 部署文章： 123hexo cleanhexo generatehexo deploy 更换Mac电脑工作安装git，有三种方法：1、一是安装homebrew，然后通过homebrew安装git（感觉这个比较适合2、二是从App Store安装Xcode，运行后，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了（习惯用jetbrains产品，未尝试第二种3、三是直接在终端输入git -v，即可安装（走了这步，因为还要装node，最后还是装了brew 安装完成后，同前面Windows操作一样，再生成SSH添加到GitHub： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 检查： 123git config user.namegit config user.emailssh-keygen -t rsa -C &quot;youremail&quot; 一路回车后，找到文件夹下的id_rsa.pub文件，复制到GitHub的setting中，找到SSH keys的设置选项，点击New SSH key添加，找不到的可以”Command+Shift+. “控制文件显隐或者直接搜索：Finder–&gt;前往–&gt;前往文件夹–&gt;输入~/.ssh检查： 1ssh -T git@github.com 之后发现安装node，还是需要homebrew，homebrew官网提供的地址连不上, 知乎找到了对策，来自高赞回答 1/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot; 再使用brew，安装node： 1brew install node 检查： 12node -vnpm -v 安装hexo： 1npm install -g hexo-cli 新建文件夹后，拉取文件： 1git clone git@github.com:hannnnnah/hannnnnah.github.io.git 然后进入文件夹，就可以使用啦： 12npm installnpm install hexo-deployer-git --save 生成、部署后就可以更新啦： 12hexo ghexo d 创建文章： 1hexo new post newpage 创建草稿： 1hexo new draft newpage 预览草稿： 1hexo server --draft 发布草稿： 1hexo publish draft newpage 编辑完后上传： 123git add .git commit –m &quot;xxxx&quot;git push 再次拉取： 1git pull 部署文章： 123hexo cleanhexo generatehexo deploy 许久未操作，更新启动测试环境1、拉取更新，从远程获取代码并合并本地的版本 1git pull 2、启动后即可在http://localhost:4000中查看测试页面 1hexo s 3、创新文章/新草稿，修改内容可实时查看 1234567891011#添加新页面hexo new post “xx”#添加草稿hexo new draft “xx”#预览草稿hexo server –draft#发布草稿hexo publish draft “xx” 4、修改后先退出本地，再发布文章 12345678#清除之前生成的东西hexo clean#生成静态文章hexo generate/hexo g#部署文章hexo deploy/hexo d 5、上传github 123git add .git commit –m &quot;xxxx&quot;git push 遇到的问题1、若遇到hexo d失败，node版本太高和hexo不匹配，可安装nvm多版本管理或者指定node@12安装 我是重新安装了node@12： 1brew install node@12 然后添加环境变量，关掉终端再次打开，node版本就降低啦： 1234vim ~/.zshrc# nodeexport PATH=&quot;/usr/local/opt/node@12/bin:$PATH&quot; 2、hexo d之后，样式没了 修改_config.yml文件里的url和root即可 3、hexo d报错这是github在21年七夕时做出的改变，在8月14之后，使用git push 需要使用token ，密码将不再支持。需要去github上创建一个token。 进入Settings-Developer settings-personal access tokens-Generate new token，维护有效时间和权限范围，然后将生成的token保存下来。 再次部署的时候，让你输入密码，你就把这个token输入进去，如果push之后没有提示输入账号密码，可以执行下面这个命令： 1git config --system --unset credential.helper 输入完了，再push就会提示输入账号密码了，记住，这次密码是刚刚生成的token哦]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL知识复习（需要注意的点]]></title>
    <url>%2F2021%2F05%2F07%2FSQL%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9%2F</url>
    <content type="text"><![CDATA[SELECT DISTINCT 语句用于返回唯一不同的值。ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，可以使用 DESC 关键字。SQL INSERT INTO 语法有两种编写形式。第一种形式无需指定要插入数据的列名，只需提供被插入的值即可： 12INSERT INTO table_nameVALUES (value1,value2,value3,...); 第二种形式需要指定列名及被插入的值： 12INSERT INTO table_name (column1,column2,column3,...)VALUES (value1,value2,value3,...); SQL SELECT TOP, LIMIT, ROWNUM 子句SQL Server / MS Access 语法： 12SELECT TOP number|percent column_name(s)FROM table_name; MySQL 语法： 123SELECT column_name(s)FROM table_nameLIMIT number; Oracle 语法： 123SELECT column_name(s)FROM table_nameWHERE ROWNUM &lt;= number; SQL 通配符_ 通配符：替代一个字符REGEXP/NOT REGEXP/RLIKE/NOT RLIKE ‘^ [charlist]’：字符列中的任何单一字符 12SELECT * FROM WebsitesWHERE name REGEXP &apos;^[A-H]&apos;; REGEXP/NOT REGEXP/RLIKE/NOT RLIKE ‘^ [^charlist]’：不在字符列中的任何单一字符 12SELECT * FROM WebsitesWHERE name REGEXP &apos;^[^A-H]&apos;; CONCAT（）把多列结合在一起在下面的 SQL 语句中，把三个列（url、alexa 和 country）结合在一起，并创建一个名为 “site_info” 的别名 12SELECT name, CONCAT(url, &apos;, &apos;, alexa, &apos;, &apos;, country) AS site_infoFROM Websites; JOIN连接 INNER JOIN ON（INNER JOIN 与 JOIN 是相同的）1234SELECT column_name(s)FROM table1INNER JOIN table2ON table1.column_name=table2.column_name; 或 1234SELECT column_name(s)FROM table1JOIN table2ON table1.column_name=table2.column_name; LEFT JOIN ON（在某些数据库中，LEFT JOIN 称为 LEFT OUTER JOIN）从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。1234SELECT column_name(s)FROM table1LEFT JOIN table2ON table1.column_name=table2.column_name; 或 1234SELECT column_name(s)FROM table1LEFT OUTER JOIN table2ON table1.column_name=table2.column_name; 3.RIGHT JOIN ON（在某些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN）从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。 1234SELECT column_name(s)FROM table1RIGHT JOIN table2ON table1.column_name=table2.column_name; 或 1234SELECT column_name(s)FROM table1RIGHT OUTER JOIN table2ON table1.column_name=table2.column_name; 4.FULL OUTER JOIN ON（mysql不支持，SQL Server支持 ）只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行。结合了 LEFT JOIN 和 RIGHT JOIN 的结果。 1234SELECT column_name(s)FROM table1FULL OUTER JOIN table2ON table1.column_name=table2.column_name; UNION合并两个或多个 SELECT 语句的结果，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。 123SELECT column_name(s) FROM table1UNIONSELECT column_name(s) FROM table2; UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。 123SELECT column_name(s) FROM table1UNION ALLSELECT column_name(s) FROM table2; SELECT INTO（MySQL 数据库不支持 SELECT … INTO 语句，但支持 INSERT INTO … SELECT）从一个表复制数据，然后把数据插入到另一个新表中。 123SELECT *INTO newtable [IN externaldb]FROM table1; 或者只复制希望的列插入到新表中： 123SELECT column_name(s)INTO newtable [IN externaldb]FROM table1; 或者拷贝表结构及数据： 123CREATE TABLE 新表ASSELECT * FROM 旧表 INSERT INTO SELECT从一个表复制数据，然后把数据插入到一个已存在的表中。 12INSERT INTO table2SELECT * FROM table1; 或者只复制希望的列插入到另一个已存在的表中： 1234INSERT INTO table2(column_name(s))SELECT column_name(s)FROM table1; SQL约束1.NOT NULL 12ALTER TABLE Persons MODIFY Age int NOT NULL;ALTER TABLE Persons MODIFY Age int NULL; 2.UNIQUE 1234ALTER TABLE Persons ADD UNIQUE (P_Id);ALTER TABLE Persons ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName);ALTER TABLE Persons DROP INDEX uc_PersonID;ALTER TABLE Persons DROP CONSTRAINT uc_PersonID; 3.PRIMARY KEY 1234ALTER TABLE Persons ADD PRIMARY KEY (P_Id);ALTER TABLE Persons ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName);ALTER TABLE Persons DROP PRIMARY KEY;ALTER TABLE Persons DROP CONSTRAINT pk_PersonID; 4.FOREIGN KEY，指向另一个表中的 UNIQUE KEY 1234ALTER TABLE Orders ADD FOREIGN KEY (P_Id) REFERENCES Persons(P_Id);ALTER TABLE Orders ADD CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id) REFERENCES Persons(P_Id);ALTER TABLE Orders DROP FOREIGN KEY fk_PerOrders;ALTER TABLE Orders DROP CONSTRAINT fk_PerOrders; 5.CHECK 1234ALTER TABLE Persons ADD CHECK (P_Id&gt;0);ALTER TABLE Persons ADD CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&apos;Sandnes&apos;);ALTER TABLE Persons DROP CONSTRAINT chk_Person;ALTER TABLE Persons DROP CHECK chk_Person; 6.DEFAULT 12345ALTER TABLE Persons ALTER City SET DEFAULT &apos;SANDNES&apos;;ALTER TABLE Persons ADD CONSTRAINT ab_c DEFAULT &apos;SANDNES&apos; for City;ALTER TABLE Persons MODIFY City DEFAULT &apos;SANDNES&apos;;ALTER TABLE Persons ALTER City DROP DEFAULT;ALTER TABLE Persons ALTER COLUMN City DROP DEFAULT; DROP删除表结构，TRUNCATE删除表内容，空间恢复到初始大小，而DELETE不会减少表或索引所占的空间12DROP TABLE table_name;TRUNCATE TABLE table_name; NULL值赋为01234SELECT ProductName,UnitPrice*(UnitsInStock+ISNULL(UnitsOnOrder,0)) FROM Products;SELECT ProductName,UnitPrice*(UnitsInStock+NVL(UnitsOnOrder,0)) FROM Products;SELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0)) FROM Products;SELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0)) FROM Products;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL知识点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo初步学习]]></title>
    <url>%2F2019%2F07%2F01%2Fhexo%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[参考文档： 1、hexo中文文档 2、https://blog.csdn.net/sinat_37781304/article/details/82729029 hexo部署到github1、安装git 2、安装nodejs 3、用 npm 安装话经常出现卡住而导致无法正常安装，解决办法就是修改 npm 的安装源，这里选择淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 1npm config set registry https://registry.npm.taobao.org 4、安装hexo 1npm install -g hexo-cli 5、查看版本信息 1hexo -v 6、初始化hexo程序 1hexo init myblog （更新npm/并更换为国内的npm镜像命令：npm install npm -g/npm install -g cnpm –registry=https://registry.npm.taobao.org） 7、进入myblog文件夹 1cd myblog 8、 1npm install 9、查看文件夹目录 node_modules: 依赖包 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 10、打开hexo 12hexo ghexo server 11、创建以用于提交 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 12、连接公钥 1ssh-keygen -t rsa -C &quot;email&quot; 13、查看是否成功 1ssh -T git@github.com （You’ve successfully authenticated, but GitHub does not provide shell access.） 14、将hexo和GitHub关联起来，修改配置文件_config.yml 1234deploy: type: （中间有个空格，以下相同）git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 15、安装deploy-git部署命令 1npm install hexo-deployer-git --save 16、清除之前生成的东西 1hexo clean 17、生成静态文章 1hexo generate/hexo g 18、部署文章 1hexo deploy/hexo d 19、github中要新建一个仓库用户名+github.io，访问用户名.github.io即可 设置hexo主题1、选择hexo主题，到github上下载主题放到themes文件夹下2、修改_config.yml里的theme为该文件夹名称 新增菜单栏选项1、添加新页面：hexo new page “xx”2、在主题配置文件的menu中加上该页面3、在zh-CN.yml文件中加上中文意思 新增草稿1、添加草稿：hexo new draft “xx”2、预览草稿：hexo server –draft3、发布草稿：hexo publish draft “xx” 搜索1、npm install hexo-generator-searchdb –save2、站点配置文件的扩展下添加 12345search: path: search.xml field: post format: html limit: 10000 3、主题配置文件下，local_search改成true即可 12local_search: enable: true 字数1、npm install hexo-symbols-count-time –save2、站点配置 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 宠物1、npm install –save hexo-helper-live2d2、live2d插件3、安装合适的宠物npm install live2d-widget-model-wanko4、在配置文件中添加即可 1234567891011121314151617181920live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model:# use: live2d-widget-model-tororo# use: live2d-widget-model-hijiki use: live2d-widget-model-wanko display: position: right width: 150 height: 300# 水平位置# hOffset: 0# 垂直位置# vOffset: -20 mobile: show: true 点击弹爱心1、在source-&gt;js目录下新建一个js文件为click-love.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950! function (e, t, a) &#123; function n() &#123; c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &quot;left:&quot; + d[e].x + &quot;px;top:&quot; + d[e].y + &quot;px;opacity:&quot; + d[e].alpha + &quot;;transform:scale(&quot; + d[e].scale + &quot;,&quot; + d[e].scale + &quot;) rotate(45deg);background:&quot; + d[e].color + &quot;;z-index:99999&quot;); requestAnimationFrame(r) &#125; function o() &#123; var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement(&quot;div&quot;); a.className = &quot;heart&quot;, d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement(&quot;style&quot;); a.type = &quot;text/css&quot;; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a) &#125; function s() &#123; return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot; &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n()&#125;(window, document); 2、在主题theme-&gt;layout-&gt;_partials-&gt;footer文件中导入该js文件即可 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/click-love.js&quot;&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
